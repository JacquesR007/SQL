-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.department
(
    depart_id bigserial NOT NULL,
    depart_name character varying(50) COLLATE pg_catalog."default",
    depart_city character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT department_id PRIMARY KEY (depart_id)
);

SELECT * FROM department; 

INSERT INTO department (
    depart_name,
    depart_city)
VALUES 
('Managing Director', 'Pretoria'),
('Reception', 'Durban'),
( 'Sales Rep', 'Durban'),
( 'Cleaner', 'CapeTown');

CREATE TABLE IF NOT EXISTS public.employees
(
    emp_id bigserial NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default",
    last_name character varying(50) COLLATE pg_catalog."default",
    gender character varying(50) COLLATE pg_catalog."default",
    address character varying(50) COLLATE pg_catalog."default",
    email character varying(50) COLLATE pg_catalog."default",
    depart_id bigint NOT NULL,
    role_id bigint NOT NULL,
    salary_id bigint NOT NULL,
    overtime_id bigint NOT NULL,
    CONSTRAINT employee_id PRIMARY KEY (emp_id)
);

SELECT * FROM employees ; 

INSERT INTO employees (
    first_name,
    last_name,
    gender,
    address,
    email,
    depart_id,
    role_id,
    salary_id,
    overtime_id
)

VALUES 
( 'Jacques', 'Rossouw', 'Male', '123 Code street', 'abc.123@gmail.com', 1, 1, 1, 1 ),
( 'Khyla', 'Kritzinger', 'female', '456 Code street', 'def.123@gmail.com', 2, 2, 2, 2 ),
( 'Bob', 'Sanders', 'Other', '46 Code street', 'def.1234@gmail.com', 3, 3, 3, 3),
( 'Marry', 'Poppins', 'female', '455126 Code street', 'def.1235@gmail.com', 4, 4, 4, 4 )
;

INSERT INTO employees (
    first_name,
    last_name,
    gender,
    address,
    email,
    depart_id,
    role_id,
    salary_id,
    overtime_id
)
VALUES 
( 'Marry', 'Poppins', 'female', '455126 Code street', 'def.1235@gmail.com', 5, 5, 5, 5 )
; 


CREATE TABLE IF NOT EXISTS public.overtime_hours
(
    overtime_id bigserial NOT NULL,
    overtime_hours character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT overtime_id PRIMARY KEY (overtime_id)
);

SELECT * FROM overtime_hours;

INSERT INTO overtime_hours (
    overtime_hours)
VALUES 
( '1.2'),
( '6.2'),
( '0.2'),
( '4.2')
;

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id bigserial NOT NULL,
    roles character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT role_id PRIMARY KEY (role_id)
);

SELECT * FROM roles ;

INSERT INTO roles 
   ( roles)
VALUES 
( 'Manager'),
('Admin'),
('Sales'),
( 'Cleaning')
;

CREATE TABLE IF NOT EXISTS public.salaries
(
    salary_id bigserial NOT NULL,
    salary_pa character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT salary_id PRIMARY KEY (salary_id)
);

SELECT * FROM salaries ; 

INSERT INTO salaries (
   salary_pa)
VALUES 
( 'R525000'),
('R68000'),
('R125000'),
( 'R35000')
;

ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT depart_id FOREIGN KEY (depart_id)
    REFERENCES public.department (depart_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT roles_id FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT salary_id FOREIGN KEY (salary_id)
    REFERENCES public.salaries (salary_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT overtime_id FOREIGN KEY (overtime_id)
    REFERENCES public.overtime_hours (overtime_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
    
    SELECT 
e.first_name,
e.last_name,
e.gender,
e.address,
e.email,
d.depart_name,
d.depart_city,
s.salary_pa,
r.roles,
o.overtime_hours

FROM employees AS e

LEFT JOIN department AS d
ON e.depart_id = d.depart_id

LEFT JOIN salaries AS s
ON e.salary_id = s.salary_id

LEFT JOIN roles AS r
ON e.role_id = r.role_id

LEFT JOIN overtime_hours AS o
ON e.overtime_id = o.overtime_id;


END;